<?php
/**
 * @author moonzhang
 *
 * Test class for SOSO_ORM_Table.
 * Generated by PHPUnit on 2012-02-28 at 17:19:36.
 */
class TableTest extends PHPUnit_Framework_TestCase
{
	/**
	 * @var SOSO_ORM_Table
	 */
	protected $object;

	protected $fixture;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 *  qq为123456的数据的source指定为null
	 */
	protected function setUp()
	{
		$this->object = new Users();
		parent::setUp();

		$this->object->fillObjectData(array('qq'=>123456,'golds'=>100,'maxgolds'=>500))
		->add('source',null)
		->_replace();
		$this->object->_reset();
	}

	public function assertEqualsSQL($a,$b,$c=''){
		return $this::assertEquals($a, $b,$c ? $c : "\nSQLQuery:\n\t".$this->object->getLastQuery());
	}


	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown()
	{
		$this->object
		->fillObjectData(array('qq'=>123456,'golds'=>100,'maxgolds'=>500))
		->add('source',null)
		->_replace();
		$this->object->in('qq',array(88888,99999,55555+12343,strrev(55555+12343)))->delete();
		$this->object->_reset();
		 
	}

	/**
	 * @covers SOSO_ORM_Table::getCriteria
	 *
	 */
	public function testGetCriteria()
	{
		//echo "crit\n";
		//echo get_include_path();
		$criteria = $this->object->getCriteria();
		//echo "\n";
		$this->assertTrue($criteria instanceof SOSO_ORM_Criteria);
		$this->assertEquals(0, $criteria->size());
		$this->assertEquals($this->object->getTable(), $criteria->getPrimaryTableName());
	}

	/**
	 * @covers SOSO_ORM_Table::initCriteria
	 *
	 */
	public function testInitCriteria()
	{

		$crit = new SOSO_ORM_Criteria();
		$this->assertNotEquals($crit, $this->object->getCriteria());
		$this->object->initCriteria($crit);
		$this->assertEquals($crit, $this->object->getCriteria());
		 
	}

	/**
	 * @covers SOSO_ORM_Table::Factory
	 *
	 */
	public function testFactory()
	{
		$this->markTestSkipped();
	}

	/**
	 * @covers SOSO_ORM_Table::_select
	 *
	 */
	public function test_select()
	{
		//var_dump($GLOBALS);exit;
		$existQQ = 123456;
		$noexistQQ = 888888;
		 
		$table = $this->object;
		$table->mQq = $existQQ;
		$res = $table->_select();
		$this->assertTrue($res,"data qq($existQQ) exists but false returned");
		if ($res){
			$this->assertEqualsSQL(100, $table->mGolds);
			$this->assertEqualsSQL(500, $table->mMaxgolds);
			$table->_reset();
		}
		$this->assertNull($table->mQq);

		$crit = $table->getCriteria();

		$table->setPage(1,5);
		$this->assertEquals(5, $crit->getLimit(),'limit shoult be 5');
		$this->assertEquals(0, $crit->getOffset(),'offset shoult be 0');

		/**　*　/
		 使用一个不存在的qq号
		 start
		 */
		$table->add('qq',$noexistQQ);
		$res2 = $table->_select(1);
		$this->assertFalse($res2,"data qq($noexistQQ) not exists but true returned");
		/**
		 * 因为_select使用的是克隆的criteria对象，所以limit信息对原来的对象不产生影响,
		 */
		$this->assertEquals($crit, $table->getCriteria());
		$this->assertEquals(5, $crit->getLimit(),'limit shoult be 5');
		$this->assertEquals(0, $crit->getOffset(),'offset shoult be 0');
		/* end */


		/**　*　/
		 查找一个存在的qq号
		 start
		 */
		$table->add('qq',$existQQ);
		$res3 = $table->_select(1);
		$this->assertTrue($res3,"data qq($existQQ) exists but false returned");
		$this->assertEquals($crit, $table->getCriteria());
		if ($res3){
			$this->assertEqualsSQL(100, $table->mGolds);
			$this->assertEqualsSQL(500, $table->mMaxgolds);
			$table->_reset();
		}
		/**
		 因为_select使用的是克隆的criteria对象，所以limit信息对原来的对象不产生影响,
		 但因为是select操作，查到数据并且有主键时会进行字段回填，并清空criteria,将主键信息写入criteria
		 */
		$this->assertEquals(0, $crit->getLimit(),'limit shoult be 0');
		$this->assertEquals(0, $crit->getOffset(),'offset shoult be 0');

		/**
		 * 换一个offset，使查询结果失败
		 */
		/**　*　/
		 查找一个存在的qq号
		 start
		 */
		$table->add('qq',$existQQ);
		$res4 = $table->_select(2);
		$this->assertFalse($res4,"data qq($existQQ) not exists but true returned");
		$this->assertEquals($crit, $table->getCriteria());

	}

	/**
	 * @covers SOSO_ORM_Table::{origMethodName}
	 *
	 */
	public function test_replace()
	{
		$notExistQq = 88888;
		$this->object->_reset();
		$this->object->add('qq',$notExistQq)
		->delete();
		 
		$this->object->mQq = $notExistQq;
		$this->object->mGolds = 123;
		$data = $this->object->_replace();
		$this->assertEquals(1, $data);
			
		$data = $this->object->_replace(array('qq'=>$notExistQq,'golds'=>222));
		$this->assertEquals(2, $data);
		 
		$golds = 456;
		$data = $this->object->_replace(array('qq'=>$notExistQq,'golds'=>$golds));
		$this->assertEquals(2, $data);
		$fetchData = $this->object->find();
		$this->assertArrayHasKey('qq', $fetchData[0]);
		$this->assertArrayHasKey('golds', $fetchData[0]);
		$this->assertEquals($notExistQq, $fetchData[0]['qq']);
		$this->assertEquals($golds, $fetchData[0]['golds']);
		 
		/**
		 replace参数如果使用不存在的字段，则忽略掉
		 *
		 */
		$data = $this->object->_replace(array('qq'=>$notExistQq,'golds'=>789,'NotExistCol'=>'test',52=>'testNumber'));
		$fetchData = $this->object->find();
		$this->assertNotEquals($golds, $fetchData[0]['golds']);
		$this->assertEquals(2, $data);
		$this->assertEquals(789, $fetchData[0]['golds']);
		 
		$data = $this->object->delete();
		$this->assertEquals(1, $data);
	}

	protected function debug($channel=''){
		echo "\n\t".$channel." SQL:".$this->object->getLastQuery();
		echo "\n";
	}

	public function forUpdate(){
		$qq = 55555;
		$golds = 4444;
		$maxgolds = 3333;
		$source = 'test';
		$date = date("Y-m-d");

		/* $data = array('qq'=>$qq,'golds'=>$golds,'maxgolds'=>$maxgolds,'source'=>$source,'daily_date'=>$date);
		 $this->object->_replace($data);
		 */
		return array(
		array($qq,$golds,$maxgolds,$source,$date)
		);
	}

	protected function initUpdateData($qq,$golds,$maxgolds,$source,$date){
		$data = array('qq'=>$qq,'golds'=>$golds,'maxgolds'=>$maxgolds,'source'=>$source,'daily_date'=>$date);
		$this->object->_replace($data);
		$this->object->_reset();
	}
	/**
	 * @covers SOSO_ORM_Table::_update
	 * 测试使用$obj->mCol设置主键来更新的方式
	 * @dataProvider forUpdate
	 */
	public function test_update($qq,$golds,$maxgolds,$source,$date)
	{
		/* $qq = 55555;
		 $golds = 4444;
		 $maxgolds = 3333;
		 $source = 'test';
		 $date = date("Y-m-d");

		 $data = array('qq'=>$qq,'golds'=>$golds,'maxgolds'=>$maxgolds,'source'=>$source,'daily_date'=>$date);
		 $res = $this->object->_replace($data);
		 $this->object->_reset();*/
		$this->initUpdateData($qq, $golds, $maxgolds, $source, $date);
		 
		$tNewQq = 33333;
		$tNewGolds = 44444;
		$tNewMaxgolds = 55555;
		$tNewSource = 'tteesstt';
		$tNewDate = date("Y-m-d");
		$this->object->mQq = $qq;
		$this->object->mGolds = $tNewGolds;
		$this->object->mMaxgolds = $tNewMaxgolds;
		$this->object->mDailyDate = $tNewDate;
		$this->object->mSource = $tNewSource;
		$res = $this->object->_update();
		$this->assertEquals(0, $this->object->getCriteria()->size());

		/**
		 * 使用这种方式无法改变主键
		 * 如想把qq从$qq改成$tNewQq,使用$obj->mCol的方式会失败
		 */
		$this->object->mQq = $tNewQq;
		$res2 = $this->object->_update();
		/**
		 *  $this->debug();
		 var_dump($res2);
		 * SQL如下：
		 * UPDATE users SET `qq` = '33333'  , `golds` = '44444'  , `maxgolds` = '55555'  , `source` = 'tteesstt'  , `daily_date` = '2012-03-08'  WHERE `qq` = '33333'
		 * set的值和where的值都是$tNewQq，导致执行失败
		 */
		 
		$this->object->add('qq',$qq);
		$data = $this->object->find();
		$data = $data[0];
		$this->assertEquals(1,$res);
		$this->assertEquals($tNewDate, $data['daily_date']);
		$this->assertEquals($tNewSource, $data['source']);
		$this->assertEquals($tNewGolds, $data['golds']);
		$this->assertEquals($tNewMaxgolds, $data['maxgolds']);

		$this->object->_reset();
		//不设置主键条件时，只有mAdditionalCondition指定的条件生效,如果连这也不指定，则更新全表
		$this->object->mAdditionalCondition = "qq=$qq and source = '$tNewSource'";
		$this->object->mGolds = 9;
		$res = $this->object->_update();
		$this->object->delete();
		$this->assertEquals(1, $res);
	}

	/**
	 *
	 * 测试使用$obj->add(...)和$obj->mCol混合的方式设置条件和值
	 *
	 * @dataProvider forUpdate
	 */
	public function test_update2($qq,$golds,$maxgolds,$source,$date){
		$this->initUpdateData($qq, $golds, $maxgolds, $source, $date);
		 
		$newQq = 99999;
		$newGolds = 123;
		$this->object->add('qq',$newQq)->delete();
		$this->object->_reset();
		$this->assertEquals(0, $this->object->getCriteria()->size());
		$this->object->mQq = $newQq;
		$this->object->mGolds = $newGolds;
		/**
		 * １、$obj->mCol设置的不是主键时，不会放到条件里
		 * ２、当add()设置的健,都会成为条件
		 * ３、设主键时，二种方式如果同时存在，以add为主
		 */
		$this->object->add('qq',$qq);
		$res = $this->object->_update();
		$this->assertEquals(1, $res);
		$this->object->add('qq',$newQq)->delete();
	}
	/**
	 * @covers SOSO_ORM_Table::_update
	 * 测试传参的方式
	 * @dataProvider forUpdate
	 */
	public function test_update3($qq,$golds,$maxgolds,$source,$date)
	{
		$this->initUpdateData($qq, $golds, $maxgolds, $source, $date);

		$newQq = 98765;
		$newGolds = 567890;
		 
		$this->object->add('qq',$qq);
		$result = $this->object->_update(array('qq'=>$newQq,'golds'=>$newGolds));
		$data2 = $this->object->add('qq',$qq)->find();
		$this->assertEquals(1, $result);
		$this->object->add('qq',$newQq);
		$data = $this->object->find();
		 
		$this->assertEquals($maxgolds, $data[0]['maxgolds']);
		$this->assertEquals($newGolds, $data[0]['golds']);
		$this->assertEquals($newQq, $data[0]['qq']);
		$this->assertEquals(1, count($data));

		/**
		 * 如果传参的值为null，则会设置此字段的值为null
		 *
		 */
		$result = $this->object->_update(array('qq'=>$qq,'golds'=>$golds,'source'=>null));
		$data = $this->object->add('qq',$qq)->find();
		$this->object->delete();
		$this->assertNull($data[0]['source']);
	}

	/**
	 *
	 * @covers SOSO_ORM_Table::_update
	 * @dataProvider forUpdate
	 *
	 * 测试传参为SOSO_ORM_Criteria的结果
	 */
	public function test_update4($qq,$golds,$maxgolds,$source,$date)
	{
		$this->initUpdateData($qq, $golds, $maxgolds, $source, $date);
		 
		$tNewQq = 13579;
		$tGolds = 24680;
		$crit = new SOSO_ORM_Criteria();
		$crit->add('qq',$tNewQq)
		->add('golds',$tGolds)
		->add('source',null);//设置为null
		$res = $this->object->add('qq',$qq)->_update($crit);
		//UPDATE users SET qq = '13579'  , golds = '24680'  ,  source = null  WHERE `qq` = '55555'
		 
		$data = $this->object->add('qq',$tNewQq)->add('source',null)->find();
		//echo $this->object->getLastQuery();
		//SELECT * FROM users WHERE `qq` = '13579'  AND  ( `source` is null )
		$this->object->delete();
		$this->assertEquals($tNewQq, $data[0]['qq']);
		$this->assertEquals($tGolds, $data[0]['golds']);
		$this->assertEquals($maxgolds, $data[0]['maxgolds']);
		$this->assertNull($data[0]['source']);
	}

	/**
	 * @covers SOSO_ORM_Table::fillObjectData
	 *
	 */
	public function testFillObjectData()
	{
		$this->object->_reset();
		$this->assertNull($this->object->mQq);
		$this->assertNull($this->object->mGolds);

		$qq = 123;
		$golds = 456;
		$this->object->fillObjectData(array('qq'=>$qq,'golds'=>$golds));

		$this->assertEquals($this->object->mQq,$qq);
		$this->assertEquals($this->object->mGolds,$golds);

		$this->object->_reset();
		//随便放置一个不存在的字段
		$this->object->fillObjectData(array('qq'=>$qq,'golds'=>$golds,'xx'=>'test'));
		$this->assertArrayNotHasKey('xx', $this->object->getMapHash());
		$this->assertFalse(isset($this->mXx));
	}


	/**
	 * @covers SOSO_ORM_Table::_fill
	 *
	 */
	public function test_fill()
	{
		$this->object->_reset();
		$this->assertNull($this->object->mQq);
		$this->assertNull($this->object->mGolds);

		$qq = 123;
		$golds = 456;
		$this->object->_fill(array('qq'=>$qq,'golds'=>$golds));

		$this->assertEquals($this->object->mQq,$qq);
		$this->assertEquals($this->object->mGolds,$golds);

		$this->object->_reset();
		//随便放置一个不存在的字段
		$this->object->_fill(array('qq'=>$qq,'golds'=>$golds,'xx'=>'test'));
		$this->assertArrayNotHasKey('xx', $this->object->getMapHash());
		$this->assertFalse(isset($this->mXx));
	}

	/**
	 * @covers SOSO_ORM_Table::GetObjectData
	 *
	 */
	public function testGetObjectData()
	{
		$this->assertNull($this->object->getObjectData('qq'));
		$this->assertNull($this->object->getObjectData('golds'));

		$qq = 123;
		$golds = 445;
		$this->object->fillObjectData(array('qq'=>$qq,'golds'=>$golds));

		$this->assertEquals($qq, $this->object->getObjectData('qq'));
		$this->assertEquals($golds, $this->object->getObjectData('golds'));

		//取一个不存在的字段，返回null
		$this->assertNull($this->object->getObjectData('columnNotExist'));
	}

	/**
	 * @covers SOSO_ORM_Table::setObjectData
	 *
	 */
	public function testSetObjectData()
	{
		$this->assertNull($this->object->getObjectData('qq'));
		$this->assertNull($this->object->getObjectData('golds'));

		$qq = 123;
		$golds = 445;
		$res = $this->object->setObjectData('qq',$qq);
		$this->object->setObjectData('golds',$golds);

		$this->assertTrue($res);
		$this->assertEquals($qq, $this->object->getObjectData('qq'));
		$this->assertEquals($golds, $this->object->getObjectData('golds'));
		$this->assertEquals($qq, $this->object->mQq);
		$this->assertEquals($golds, $this->object->mGolds);

		//设置一个不存在的字段，返回null
		$res = $this->assertFalse($this->object->setObjectData('colNotExist', 'value'));
	}

	/**
	 * @covers SOSO_ORM_Table::_insert
	 * 旧的API方式，使用$obj->mColumnName方式
	 */
	public function test_insert()
	{
		$this->object->mQq = 77777;
		$this->object->mGolds = 2222;
		$this->object->mMaxgolds = 3333;
		$this->object->mSource = 'test';
		$this->object->mDailyDate = date("Y-m-d");
		$res = $this->object->_insert();
		$this->object->delete();
		$this->assertTrue($res);
	}

	/**
	 * @covers SOSO_ORM_Table::_insert
	 * 新的API方式，使用$obj->add('col','value')方式
	 */
	public function test_insert2()
	{
		$this->object->add('qq',77777);
		$this->object->add('golds',2222);
		$this->object->add('maxgolds', 3333);
		$this->object->add('source','test');
		$this->object->add('daily_date',date("Y-m-d"));
		$res = $this->object->_insert();
		$this->object->delete();
		$this->assertTrue($res);

		$this->object->add('source',null);
		$res = $this->object->_insert();
		$this->object->delete();
	}

	/**
	 * @covers SOSO_ORM_Table::_insert
	 * 混合方式，使用$obj->mCol和$obj->add('col','value')方式
	 * 此用例测试完全写二份的情况，应该以add的值优先
	 */
	public function test_insert3()
	{
		$qq = 77777;
		$golds = 22222;
		$maxgolds = 33333;
		$source = 'test';
		$date = date("Y-m-d");
		 
		$this->object->mQq = 666666;
		$this->object->mGolds = 1111;
		$this->object->mMaxgolds = 2222;
		$this->object->mSource = 'TtEeSsTt';
		 
		$this->object->add('qq',$qq);
		$this->object->add('golds',$golds);
		$this->object->add('maxgolds', $maxgolds);
		$this->object->add('source', $source);
		$this->object->add('daily_date',$date);
		$res = $this->object->_insert();
		$data = $this->object->find();
		$data = $data[0];

		$this->object->delete();
		$this->assertTrue($res);
		$this->assertEquals($qq, $data['qq']);
		$this->assertEquals($golds, $data['golds']);
		$this->assertEquals($source, $data['source']);
		$this->assertEquals($date, $data['daily_date']);
	}

	/**
	 * @covers SOSO_ORM_Table::_insert
	 * 混合方式，使用$obj->mCol和$obj->add('col','value')方式
	 * 二种方式配合使用
	 */
	public function test_insert4()
	{
		$qq = 77777;
		$golds = 22222;
		$maxgolds = 33333;
		$source = 'test';
		$date = date("Y-m-d");
		 
		$this->object->mQq = $qq;
		$this->object->mGolds = 1111;
		$this->object->mMaxgolds = $maxgolds;
		$this->object->mSource = $source;
		 
		//$this->object->add('qq',$qq);
		$this->object->add('golds',$golds);
		// $this->object->add('maxgolds', $maxgolds);
		// $this->object->add('source', $source);
		$this->object->add('daily_date',$date);
		$res = $this->object->_insert();
		$data = $this->object->find();
		$data = $data[0];

		$this->object->delete();
		$this->assertTrue($res);
		$this->assertEquals($qq, $data['qq']);
		$this->assertEquals($golds, $data['golds']);
		$this->assertEquals($source, $data['source']);
		$this->assertEquals($date, $data['daily_date']);
	}

	/**
	 *
	 * 测试传二维数组给_insert
	 * @covers SOSO_ORM_Table::_insert
	 * @dataProvider forUpdate
	 */
	public function test_insert5($qq,$golds,$maxgolds,$source,$date)
	{
		$qq += 12343;
		$array = array(
		array('qq'=>$qq,'golds'=>$golds,'maxgolds'=>$maxgolds,'source'=>$source,'daily_date'=>$date),
		array('qq'=>strrev($qq),'golds'=>2222+$golds,'maxgolds'=>1111+$maxgolds,'source'=>strrev($source),'daily_date'=>$date)
		);
		$res = $this->object->_insert($array);
		$map = array_filter($this->object->getMapHash());
		
		$array2 = array(
		array('qq'=>$qq,'golds'=>$golds,'maxgolds'=>$maxgolds,'source'=>$source,'daily_date'=>$date),
		array('qq'=>strrev($qq),'golds'=>2222+$golds,'maxgolds'=>1111+$maxgolds,'source'=>strrev($source),'daily_date'=>$date)
		);
		$res2 = $this->object->_insert($array2);
		
		
		//****************
		$this->object->add('qq',$qq)->delete();
		$array3 = array(
		array('qq'=>$qq,'golds'=>$golds,'maxgolds'=>$maxgolds,'source'=>$source,'daily_date'=>$date),
		array('qq'=>strrev($qq),'golds'=>2222+$golds,'maxgolds'=>1111+$maxgolds,'source'=>strrev($source),'daily_date'=>$date)
		);
		$res3 = $this->object->_insert($array3);

		//****************
		$this->object->add('qq',strrev($qq))->delete();
		$array4 = array(
		array('qq'=>$qq,'golds'=>$golds,'maxgolds'=>$maxgolds,'source'=>$source,'daily_date'=>$date),
		array('qq'=>strrev($qq),'golds'=>2222+$golds,'maxgolds'=>1111+$maxgolds,'source'=>strrev($source),'daily_date'=>$date)
		);
		//返回０条结果，因为第一条就失败了，中止
		$res4 = $this->object->_insert($array4);
		$this->object->in('qq',array($qq,strrev($qq)))->delete();
		
		//echo $this->object->getLastQuery();
		//print_r($this->object->getError());
		//print_r($res);
		$this->assertEquals(count($array), count($res));
		//二条执行结果均成功，会返回二个true
		$this->assertEquals($res, array(1,1));
		//不会对Table本身属性有任何影响
		$this->assertEmpty($map);
		 
		$this->assertEquals(count($res2), 0);
		//二条执行结果均失败，会返回空，因为只要有失败，就会在失败那条结果上中止
		$this->assertEquals($res2, array());
		
		$this->assertEquals(count($res3), 1);
		//第一条执行成功，会返回true,第二条失败，执行中止
		$this->assertEquals($res3, array(1));
		$this->assertEquals(count($res4), 0);
		$this->assertEquals($res4, array());
	}
	/**
	 * @covers SOSO_ORM_Table::_list
	 * 老的方式调用
	 */
	public function test_list1()
	{
		//********************************************************************************
		//目前数据库中有１０条结果
		$num = 10;
		$res = $this->object->_list(0,-5,'qq');
		$this->assertEquals($num, count($res));
		$this->assertEquals(0, $this->object->getCriteria()->size());
		 
		$num = 5;
		$res2 = $this->object->_list(1,$num,'qq');
		$this->assertEquals($num, count($res2));
		$this->assertEquals(0, $this->object->getCriteria()->size());
		$this->assertEquals(array_slice($res, 0,$num), $res2);
		$this->assertEquals(0, $this->object->getCriteria()->getLimit());
		$this->assertEquals(0, $this->object->getCriteria()->getOffset());
		$this->assertEquals(array(), $this->object->getCriteria()->getSelectColumns());
		 
		//print_r($this->object->getCriteria());
		 
		//********************************************************************************
		$num = 5;
		//设置一个不存在的结果集,但这并不会影响_list的结果，它的结果集控制是以前二个参数为主
		$pageNotExist = 100;
		$this->object->getCriteria()->setPage($pageNotExist,$num);
		//设置一个不存在的字段,但这并不会影响_list的结果，它的结果集控制是以前二个参数为主
		$this->object->setSelect('a,b,c');
		 
		$res3 = $this->object->_list(2,$num,'1 desc');
		// $this->debug();
		$this->assertEquals($num, count($res3));
		$this->assertEquals(0, $this->object->getCriteria()->size());
		$this->assertEquals(array_slice($res, 0,$num), array_reverse($res3));
		$this->assertEquals($res2, array_reverse($res3));
		$this->assertEquals($num, $this->object->getCriteria()->getLimit());
		$this->assertEquals($pageNotExist, $this->object->getCriteria()->getPage());
		$this->assertEquals(array('a','b','c'), $this->object->getCriteria()->getSelectColumns());
		foreach (array_keys($this->object->getMapHash()) as $key)
		{
			$this->assertArrayHasKey($key, $res3[0]);
		}
		 
		//********************************************************************************
		//指定字段
		$columns = array('qq','golds','maxgolds');
		$res4 = $this->object->_list(2,$num,'1 desc',1,$columns);
		//print_r($res4);
		//$this->debug();
		$this->assertEquals($num, count($res4));
		$this->assertEquals(0, $this->object->getCriteria()->size());
		//$this->assertEquals(array_slice($res, 0,$num), array_reverse($res3));
		//$this->assertEquals($res2, array_reverse($res3));
		$this->assertEquals($num, $this->object->getCriteria()->getLimit());
		$this->assertEquals($pageNotExist, $this->object->getCriteria()->getPage());
		$this->assertEquals(array('a','b','c'), $this->object->getCriteria()->getSelectColumns());
		foreach ($columns as $key)
		{
			$this->assertArrayHasKey($key, $res4[0]);
		}
		$notExistColumn = 'buytimes';
		$this->assertArrayNotHasKey($notExistColumn, $res4[0]);
		 
		//********************************************************************************
		//指定group by
		$columns = array('qq','golds','maxgolds');
		$groupBy = array('qq');
		$res5 = $this->object->_list(2,$num,'1 desc',1,$columns,$groupBy);
		//print_r($res4);
		//$this->debug();
		$this->assertEquals($num, count($res5));
		$this->assertEquals(0, $this->object->getCriteria()->size());
		$this->assertEquals($num, $this->object->getCriteria()->getLimit());
		$this->assertEquals($pageNotExist, $this->object->getCriteria()->getPage());

		foreach ($columns as $key)
		{
			$this->assertArrayHasKey($key, $res5[0]);
		}
		$notExistColumn = 'buytimes';
		$this->assertArrayNotHasKey($notExistColumn, $res5[0]);
	}

	public function forList(){
		return array(
		array("qq q, golds  , `maxgolds`",null),
		array("qq q, golds  , `maxgolds`",'q'),
		array(array('qq','golds','maxgolds'),'`qq`'),
		array(array('qq','golds','maxgolds'),'golds'),
		array(array('qq','golds','maxgolds'),'qq,left(qq,6)'),
		array(array('qq','golds','maxgolds'),'`qq`,left(`golds`,6)'),
		);
	}
	/**
	 *
	 * 测试column和groupby
	 * @dataProvider forList
	 */
	public function test_list2($columns,$groupby){
		//$groupBy = array('qq');
		$num = 5;
		$this->object->_reset();
		$res5 = $this->object->_list(1,$num,'1 desc',1,$columns,$groupby);
		// $this->debug();
		//echo "\n";
		//因为这５条记录在数据库中的golds值相同，所以如果按golds列分组，结果只有一条
		$this->assertEquals($groupby == 'golds' ? 1 : $num, count($res5));
		$this->assertEquals(0, $this->object->getCriteria()->size());
		$this->assertEquals(0, $this->object->getCriteria()->getLimit());
		if(is_array($columns))
		foreach ($columns as $key)
		{
			$this->assertArrayHasKey($key, $res5[0]);
		}
		if ($groupby == 'golds'){
			$data = $this->object->_reset()->_list(1,1,null,false,$columns);
			$this->assertEquals($data,$res5);
		}else{
			$data = $this->object->_reset()->orderBy('1', Restrictions::DESC)
			->setPage(1,5)
			->setSelect($columns)
			->find();
			//$this->debug();
			//对一个所有值都不同的列进行group，与不group的结果相同
			$this->assertEquals($data,$res5);
		}
		$notExistColumn = 'buytimes';
		$this->assertArrayNotHasKey($notExistColumn, $res5[0]);
	}

	public function forListJoin(){

		return array(
		//$column,$joinTable,$on,$orderby,$groupby
		array(
		array('qq','golds','maxgolds','user_items.item_id','user_items.discount'),
    				'user_items',
    				'qq',
		null,
		null
		),
		 
		array(
		array('users.qq','`golds`','maxgolds','user_items.item_id','user_items.discount'),
    				'user_items',
		array('qq','`qq`'),
    				'golds',
    				''
    				),

    				array(
    				array('users.qq','`golds`','maxgolds','user_items.item_id','user_items.discount'),
    				'user_items',
    				array('qq','`qq`'),
    				'item_id',
    				''
    				),

    				array(
    				array('*'),
    				'user_items',
    				array('qq','`qq`'),
    				'item_id',
    				''
    				),
    				 
    				array(
    				array('*','item_id'),
    				'`user_items`',
    				array('users.qq','`qq`'),
    				'`item_id`',
    				'qq'
    				),
    				array(
    				array('*','item_id xxd'),
    				'`user_items`',
    				array('users.qq','user_items.`qq`'),
    				'`item_id`',
    				'qq'
    				),
    				array(
    				"id,discount,item_id xxx,qq",
    				'`user_items`',
    				array('users.qq','user_items.`qq`'),
    				'`xxx`',
    				'left(users.qq,6)'//group by 如果有表达式，则需要开发人员自己保证合法性
    				),
    				array(
    				"id,discount,item_id xxx,qq,qq xxqq",
    				'`user_items`',
    				array('users.qq','user_items.`qq`'),
    				'`xxx`',
    				'left(xxqq,3)'
    				),
    				);
	}
	/**
	 *
	 * 测试有join条件下的join
	 * @dataProvider forListJoin
	 */
	public function test_list_for_join($column,$joinTable,$on,$orderby,$groupby,$num=10){
		$qq = $this->object->_list(0,0,null,false,'qq');
		$qq = soso_util_util::Array2Array($qq,'qq');
		//$this->object->in($qq);
		$obj = new SOSO_ORM_Table('user_items');
		$obj->in('qq',$qq['qq']);
		$userItems = $obj->find();
		//print_r($userItems);
		//echo $obj->getLastQuery();

		//$num = 10;
		$this->object->leftJoin($joinTable, $on);
		$this->object->columnAlias('pclose', 'ppcclloossee');
		$data = $this->object->_list(0,0,$orderby,false,$column,$groupby);
		/*$this->debug();
		 print_r($data);*/
		$this->assertEqualsSQL($num,count($data));
		/*foreach ($column as $col){
		 if(strpos($col,'.') !== false){
		 $col = array_pop(explode('.',$col));
		 }
		 $this->assertArrayHasKey($col, $data[0]);
		 }*/
		//为了测试，只对第一个元素放'*'
		 
		if (is_array($column) && $column[0]!='*') $this->assertEquals(count($column)+count($this->object->getCriteria()->getAsColumns()), count($data[0]));
		$data2 = array_filter($data,function($a){return strlen($a['discount']);});
		$data2 = array_merge($data2);
		//$data2 = $data;
		$temp = (soso_util_Util::Array2Array($data2,'qq'));
		$userItemsQQ = array_filter(soso_util_Util::Array2Array($userItems,'qq'));
		//print_r($userItemsQQ);
		$temp = $temp['qq'];
		$temp2 = $userItemsQQ['qq'];
		//return;
		sort($temp);
		sort($temp2);

		$this->assertEquals($temp2, $temp);
		//print_r($data2);
		//$this->debug();
		//print_r($data);
		 
	}

	/**
	 *
	 * 测试and / or 功能
	 */
	public function test_list3(){
		$num = 7;
		$this->object->add('qq',100000,'>') //1到４，有４条记录１，１，２，３
		->addAnd('qq',400000,'<')
		->addOr('qq',600000,'>') //6到8，有３条
		->addAnd('qq',888888,'<');
		$data = $this->object->_list();
		$this->assertEqualsSQL(count($data), $num);
		//$this->debug();
		//print_r($data);
	}

	/**
	 *
	 * 测试conjunction / disjunction
	 */
	public function test_list4(){
		$conj = Restrictions::conjunction();
		$conj->add(Restrictions::eq('qq','123456'))
		->add(Restrictions::eq('golds',100))
		->add(Restrictions::isNull('source'));
			
		$this->object->add($conj)->addOr(
		Restrictions::disjunction()
		->add(Restrictions::eq('qq',223456))
		->add(Restrictions::eq('qq',323456))
		);
		$data = $this->object->_list();
		$this->assertEqualsSQL(count($data), 3);
		//$this->debug();
		//print_r($data);
	}

	public function forList5(){
		return array(
		array(123456),
		array(103456),
		array(223456)
		);
	}
	/**
	 *
	 * 测试拦截器
	 * @dataProvider forList5
	 */
	public function test_list5($qq){
		$this->object->on('beforelist',function(){return false;});

		$data = $this->object->add('qq',$qq)->_list();
		$this->assertEquals(false, $data);
		$this->object->purgeListeners();

		$mock = array();
		$modern = class_exists('Closure',false);
		$modern && $this->object->on('afterlist',function($res) use(&$mock){$mock=$res;});
		$data = $this->object->add('qq',$qq)->_list();
		$this->assertEquals($qq, $data[0]['qq']);
		$this->assertEquals(1, count($data));
		$modern && $this->assertEquals($data, $mock);
	}

	/**
	 +--------+-------+----------+----------+-----------+--------+---------+--------+------------+--------+
	 | qq     | golds | maxgolds | buytimes | drawtimes | pclose | lighted | source | daily_date | status |
	 +--------+-------+----------+----------+-----------+--------+---------+--------+------------+--------+
	 | 223456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
	 | 323456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
	 | 423456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
	 | 523456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
	 | 623456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
	 | 723456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
	 | 823456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
	 | 103456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
	 | 123456 |   100 |      500 |        0 |         0 |      0 |       0 | NULL   | 0000-00-00 |      0 |
	 +--------+-------+----------+----------+-----------+--------+---------+--------+------------+--------+
	 */
	public function forEnable(){
		return array(
		array('103456','ha',SOSO_ORM_MatchMode::START),
		array('423456','o',SOSO_ORM_MatchMode::ANYWHERE),
		array('523456','ao',SOSO_ORM_MatchMode::END),
		array('823456','a',SOSO_ORM_MatchMode::ANYWHERE),
		);
	}
	/**
	 * @covers SOSO_ORM_Table::enableLike
	 * @dataProvider forEnable
	 * enableLike只对文本字段起作用，非文本字段只能通过调用Restrictions::like进行模糊查询
	 */
	public function testEnableLike($qq,$source,$mode)
	{
		//不使用like时，都是无法常到的
		$this->object->add('qq',$qq)->add('source',$source);
		$data = $this->object->find();
		$this->assertEquals(array(),$data);
		 
		$this->object->enableLike($mode);
		$data = $this->object->find();
		//$this->debug();
		//print_r($data);
		$this->assertEquals(1, count($data));
		$this->assertEqualsSQL($qq, $data[0]['qq']);

	}

	/**
	 * @covers SOSO_ORM_Table::alias
	 * 测试表别名
	 */
	public function testAlias()
	{
		$qq = 123456;
		$this->object->alias('hello');
		$this->object->add('users.qq',$qq);
		$data = $this->object->find();
		//        $this->debug();
		//  print_r($data);

		$this->assertEquals(1, count($data));
		$this->assertArrayHasKey('qq', $data[0]);
		$this->assertEqualsSQL($qq, $data[0]['qq']);

		$this->object->setSelect('users.*');
		$this->object->join('user_items', 'qq')
		->add('users.status',0);//如果不做别名替换操作，则此条SQL会执行失败
		$data2 = $this->object->find();
		$this->assertEqualsSQL($data, $data2);
		//         $this->debug();
		//        print_r($data);
	}

	public function forSetPage(){
		return array(
		array(1,5,5),
		array(2,5,5),
		array(3,5,0),
		array(4,3,1),
		);

	}
	/**
	 * @covers SOSO_ORM_Table::setPage
	 * @dataProvider forSetPage
	 */
	public function testSetPage($page,$pagesize,$resultNum)
	{
		$crit = $this->object->getCriteria();
		$this->assertEquals(0, $crit->getOffset());
		$this->assertEquals(0, $crit->getLimit());
		$this->assertEquals(1, $crit->getPage());
		 
		$data = $this->object->setPage($page,$pagesize)
		->find();
		$this->assertEqualsSQL(count($data),$resultNum);
		//       $this->assertEquals($pagesize, $crit->getOffset());
		$this->assertEquals($pagesize, $crit->getLimit());
		$this->assertEquals($page, $crit->getPage());
	}

	/**
	 *
	 * @covers SOSO_ORM_Table::join
	 * @covers SOSO_ORM_Table::in
	 */
	public function testJoin()
	{
		$joinTable = 'user_items';
		$table = new SOSO_ORM_Table($joinTable);
		$count2 = (int)$table->count();
		
		$table->setSelect('qq');
		$exists = $this->object->in('qq',$table)->find();
		
		$this->object->_reset();
		//这样的连接方式，遇到二个表字段相同时，以主表为主
		$this->object->join($joinTable,'qq');
		$data = $this->object->find();
		//$this->debug('join');

		//二个表
		$from = $this->object->getCriteria()->getFrom();
		$join = $this->object->getCriteria()->getJoins();
		//$this->debug('join');

		$this->object->_reset();
		$count = (int)$this->object->count();
		
		//相同键，第二个参数甚至可以不传
		$this->object->join($joinTable.'.qq','',SOSO_ORM_Criteria::LEFT_JOIN);
		$data2 = $this->object->find();
		//$this->debug('something');
		
		$data2_1 = array_filter($data2,function($a){return $a['qq']>0;});
		$from2 = $this->object->getCriteria()->getFrom();
		$join2 = $this->object->getCriteria()->getJoins();
		//$this->debug('join2');
		
		$this->object->_reset();
		//$count = (int)$this->object->count();
		$this->object->join($joinTable,'qq',SOSO_ORM_Criteria::RIGHT_JOIN);
		$data3 = $this->object->find();
		$data3_1 = array_filter($data3,function($a){return $a['golds']>0;});
		$from3 = $this->object->getCriteria()->getFrom();
		$join3 = $this->object->getCriteria()->getJoins();
		
		$this->object->_reset();
		$this->object->join($joinTable,'qq',SOSO_ORM_Criteria::INNER_JOIN);
		$data4 = $this->object->find();
		$data4 = array_map(function($a){ksort($a);return $a;},$data4);
		//$data4_1 = array_filter($data4,function($a){return $a['golds']>0;});
		$from4 = $this->object->getCriteria()->getFrom();
		$join4 = $this->object->getCriteria()->getJoins();
		$data = array_map(function($a){ksort($a);return $a;},$data);
//		$this->debug('join4');
//		var_dump($data4);
//		echo "========================\n";
//		var_dump($data);
		
		$this->assertCount(2,$from);
		$this->assertCount(1,$join);
		$this->assertCount(count($exists),$data);
		
		$this->assertCount(1,$from2);
		$this->assertCount(1,$join2);
		$this->assertCount($count,$data2);
		$this->assertCount(count($exists),$data2_1);
		
		$this->assertCount(1,$from3);
		$this->assertCount(1,$join3);
		$this->assertCount($count2,$data3);
		$this->assertCount(count($exists),$data3_1);
		
		$this->assertCount(1,$from4);
		$this->assertCount(1,$join4);
		$this->assertCount(count($exists),$data4);
		//因为连接方式不同，对于qq=123456的记录，在users表的status值为０，user_items的status值为1，所以
		//二个数据不相等
		$this->assertNotEquals($data, $data4);
	}

	/**
	 * 测试带orderBy的join
	 * @covers SOSO_ORM_Table::join
	 * @covers SOSO_ORM_Table::in
	 * 
	 */
	public function testJoin2()
	{
		$joinTable = 'user_items';
		$table = new SOSO_ORM_Table($joinTable);
		$count2 = (int)$table->count();
		
		$table->setSelect('qq');
		
		$this->object->orderBy('qq', SOSO_ORM_Restrictions::ASC);
		$exists = $this->object->in('qq',$table)->find();
		
		$this->object->orderBy('daily_date', SOSO_ORM_Restrictions::DESC,true);
		$exists2 = $this->object->in('qq',$table)->find();
		
//		$this->debug('hehe');
//		print_r($exists2);
//		return;
		$this->object->_reset();
		//这样的连接方式，遇到二个表字段相同时，以主表为主
		$this->object->join(array($joinTable,'user_feed'),'qq');
		$data = $this->object->find();
		$sql = $this->object->getLastQuery();
//		$this->debug('join');
//		print_r($data);

		$this->object->join(array($joinTable,'user_feed.qq'),'qq');
		$data_1 = $this->object->find();
		$sql_1 = $this->object->getLastQuery();
//		$this->debug('join');
//		print_r($data_1);
//		return;

		$this->object->_reset();
		$this->object->join('user_items.qq',array('qq'));
		$data2 = $this->object->find();
		$sql2 = $this->object->getLastQuery();
		
		$this->object->_reset();
		$this->object->join('user_items',array('qq','qq'));
		$data3 = $this->object->find();
		$sql3 = $this->object->getLastQuery();
		
		$this->object->_reset();
		//此处与$sql相同，如果第二个参数传字符串，则第一个参数里的数组元素可以没有字段信息；
		//如果第二个参数为数组，则第一个参数数组元素必须包含对应的字段信息，否则sql不正确
		//另外，如果第二个参数为数组，元素个数需与第一个参数相同
		$this->object->join(array('user_items.qq','user_feed.qq'),array('qq','qq'));
		$data4 = $this->object->find();
		$sql4 = $this->object->getLastQuery();
//		$this->debug('data4');
//		print_r($data4);
		
		$this->assertArrayHasKey('hash_data', $data[0]);
		$this->assertArrayHasKey('item_sync_flag', $data[0]);
		$this->assertEquals($data, $data_1);
		$this->assertEquals($sql, $sql_1);
		
		$this->assertArrayHasKey('item_sync_flag', $data2[0]);
		$this->assertCount(count($exists), $data2);
		
		$this->assertEquals($sql2,$sql3);
		$this->assertEquals($data2, $data3);
		
		$this->assertEquals($sql4, $sql);
		$this->assertEquals($data4, $data);
	}
	
	/**
	 * 测试带orderBy的join
	 * @covers SOSO_ORM_Table::join
	 * @covers SOSO_ORM_Table::in
	 * @covers SOSO_ORM_Table::orderBy
	 * @covers SOSO_ORM_Table::orderBy
	 * @covers SOSO_ORM_Table::setSelect
	 * @covers SOSO_ORM_Table::alias
	 * @covers SOSO_ORM_Table::columnAlias
	 */
	public function testJoin3()
	{
		$joinTable = 'user_items';
		$table = new SOSO_ORM_Table($joinTable);
		$count2 = (int)$table->count();
		
//		$table->setSelect('qq');
//		
//		$this->object->orderBy('qq', SOSO_ORM_Restrictions::ASC);
//		$exists = $this->object->in('qq',$table)->find();
//		
//		$this->object->orderBy('daily_date', SOSO_ORM_Restrictions::DESC,true);
//		$exists2 = $this->object->in('qq',$table)->find();
		
//		$this->debug('hehe');
//		print_r($exists2);
//		return;
		$this->object->_reset();
		$oUserFeed = new SOSO_ORM_Table('user_feed');
		$qq = 123456;
		$oUserFeed->add('qq',$qq);
		$tFeedCount = $oUserFeed->count();
		$tFeedCount2 = $oUserFeed->groupBy('hash_data')->count();
		  
		$this->object->alias('u');
		$this->object->columnAlias('hash_data', 'hd');
		$this->object->add('golds',100);
		$this->object->add('qq',$qq);
		
		$this->object->join(array($joinTable,'user_feed'),'qq');
		$data = $this->object->find();
		$sql = $this->object->getLastQuery();
//		$j = $this->object->getCriteria()->getJoins();
//		$j = $j[0];
		//return;
		//print_r($data);
		//echo "\n------------------\n";
		
		$data2 = $this->object->groupBy('hash_data')->find();
		
		$this->object->getCriteria()->clearGroupByColumns();
		
		//使用别名可以正常的查询
		$data3 = $this->object->add('hd','test2 data')
			->groupBy('hd')->setSelect('golds')
			->find();
		
		$this->object->columnAlias('maxgolds', 'mxg');
		//使用别名与原字段设置的效果一样，同样会覆盖，下例为使用maxgolds=500作为条件
		$this->object->add('maxgolds','not_exists')->add('mxg',500);
		$data4 = $this->object->find();
		
		//$this->debug('alias join');
		//print_r($data4);
		
		$this->assertCount($tFeedCount,$data);
		$this->assertCount($tFeedCount2,$data2);
		$this->assertCount(1,$data3);
		$this->assertCount(1,$data4);
		$this->assertEquals(array('golds','hd'),array_keys($data3[0]));
		$this->assertEquals(array('golds','hd','mxg'),array_keys($data4[0]));
		$this->assertArrayHasKey('hash_data', $data[0]);
		$this->assertArrayHasKey('item_sync_flag', $data[0]);
		
	}
	
	
	
	/**
	 * @covers SOSO_ORM_Table::leftJoin
	 * 
	 */
	public function testLeftJoin()
	{
		$joinTable = 'user_items';
		$table = new SOSO_ORM_Table($joinTable);
		$count2 = (int)$table->count();
		
		$tUsersCount = $this->object->count(); 
		
		$table->setSelect('qq');
		
		$this->object->orderBy('qq', SOSO_ORM_Restrictions::ASC);
		$exists = $this->object->in('qq',$table)->find();
		
		$this->object->orderBy('daily_date', SOSO_ORM_Restrictions::DESC,true);
		$exists2 = $this->object->in('qq',$table)->find();
		
//		$this->debug('hehe');
//		print_r($exists2);
//		return;
		$this->object->_reset();
		//这样的连接方式，遇到二个表字段相同时，以主表为主
		$this->object->leftJoin(array($joinTable,'user_feed'),'qq');
		$data = $this->object->find();
		$sql = $this->object->getLastQuery();
//		$this->debug('join');
//		print_r($data);

		$this->object->leftJoin(array($joinTable,'user_feed.qq'),'qq');
		$data_1 = $this->object->find();
		$sql_1 = $this->object->getLastQuery();
//		$this->debug('join');
//		print_r($data_1);
//		return;

		$this->object->_reset();
		$this->object->leftJoin('user_items.qq',array('qq'));
		$data2 = $this->object->find();
//		$this->debug('leftjoin');
//		print_r($data2);
		$sql2 = $this->object->getLastQuery();
		
		$this->object->_reset();
		$this->object->leftJoin('user_items',array('qq','qq'));
		$data3 = $this->object->find();
		$sql3 = $this->object->getLastQuery();
		
		$this->object->_reset();
		//此处与$sql相同，如果第二个参数传字符串，则第一个参数里的数组元素可以没有字段信息；
		//如果第二个参数为数组，则第一个参数数组元素必须包含对应的字段信息，否则sql不正确
		//另外，如果第二个参数为数组，元素个数需与第一个参数相同
		$this->object->leftJoin(array('user_items.qq','user_feed.qq'),array('qq','qq'));
		$data4 = $this->object->find();
		$sql4 = $this->object->getLastQuery();
//		$this->debug('data4');
//		print_r($data4);
		
		$this->assertArrayHasKey('hash_data', $data[0]);
		$this->assertArrayHasKey('item_sync_flag', $data[0]);
		$this->assertEquals($data, $data_1);
		$this->assertEquals($sql, $sql_1);
		
		$this->assertArrayHasKey('item_sync_flag', $data2[0]);
		$this->assertCount($tUsersCount, $data2);
		
		$this->assertEquals($sql2,$sql3);
		$this->assertEquals($data2, $data3);
		
		$this->assertEquals($sql4, $sql);
		$this->assertEquals($data4, $data);
	}

	/**
	 * @covers SOSO_ORM_Table::rightJoing
	 * 
	 */
	public function testRightJoin()
	{
		$joinTable = 'user_items';
		$table = new SOSO_ORM_Table($joinTable);
		$count2 = (int)$table->count();
		
		$tUsersCount = $this->object->count(); 
		
		$table->setSelect('qq');
		
		$this->object->orderBy('qq', SOSO_ORM_Restrictions::ASC);
		$exists = $this->object->in('qq',$table)->find();
		
		$this->object->orderBy('daily_date', SOSO_ORM_Restrictions::DESC,true);
		$exists2 = $this->object->in('qq',$table)->find();
		
//		$this->debug('hehe');
//		print_r($exists2);
//		return;
		$this->object->_reset();
		//这样的连接方式，遇到二个表字段相同时，以主表为主
		$this->object->rightJoin(array($joinTable,'user_feed'),'qq');
		$data = $this->object->find();
		$sql = $this->object->getLastQuery();
		$this->debug('join');
		print_r($data);

		$this->object->rightJoin(array($joinTable,'user_feed.qq'),'qq');
		$data_1 = $this->object->find();
		$sql_1 = $this->object->getLastQuery();
		$this->debug('join');
		print_r($data_1);
		//return;

		$this->object->_reset();
		$this->object->rightJoin('user_items.qq',array('qq'));
		$data2 = $this->object->find();
//		$this->debug('leftjoin');
//		print_r($data2);
		$sql2 = $this->object->getLastQuery();
		
		$this->object->_reset();
		$this->object->rightJoin('user_items',array('qq','qq'));
		$data3 = $this->object->find();
		$sql3 = $this->object->getLastQuery();
		
		$this->object->_reset();
		//此处与$sql相同，如果第二个参数传字符串，则第一个参数里的数组元素可以没有字段信息；
		//如果第二个参数为数组，则第一个参数数组元素必须包含对应的字段信息，否则sql不正确
		//另外，如果第二个参数为数组，元素个数需与第一个参数相同
		$this->object->rightJoin(array('user_items.qq','user_feed.qq'),array('qq','qq'));
		$data4 = $this->object->find();
		$sql4 = $this->object->getLastQuery();
//		$this->debug('data4');
//		print_r($data4);
		
		$this->assertArrayHasKey('hash_data', $data[0]);
		$this->assertArrayHasKey('item_sync_flag', $data[0]);
		$this->assertEquals($data, $data_1);
		$this->assertEquals($sql, $sql_1);
		
		$this->assertArrayHasKey('item_sync_flag', $data2[0]);
		$this->assertCount($tUsersCount, $data2);
		
		$this->assertEquals($sql2,$sql3);
		$this->assertEquals($data2, $data3);
		
		$this->assertEquals($sql4, $sql);
		$this->assertEquals($data4, $data);
	}

	/**
	 * @covers SOSO_ORM_Table::{origMethodName}
	 * @todo Implement testColumnAlias().
	 */
	public function testColumnAlias()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
	}

	/**
	 * @covers SOSO_ORM_Table::{origMethodName}
	 * @todo Implement testAdd().
	 */
	public function testAdd()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
	}

	/**
	 * @covers SOSO_ORM_Table::{origMethodName}
	 * @todo Implement testAddOr().
	 */
	public function testAddOr()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
	}

	/**
	 * @covers SOSO_ORM_Table::{origMethodName}
	 * @todo Implement testAddHaving().
	 */
	public function testAddHaving()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
	}

	/**
	 * @covers SOSO_ORM_Table::{origMethodName}
	 * @todo Implement testAddAnd().
	 */
	public function testAddAnd()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
	}

	/**
	 * @covers SOSO_ORM_Table::{origMethodName}
	 * @todo Implement testGroupBy().
	 */
	public function testGroupBy()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
	}

	/**
	 * @covers SOSO_ORM_Table::{origMethodName}
	 * @todo Implement testOrderBy().
	 */
	public function testOrderBy()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
	}

	/**
	 * @covers SOSO_ORM_Table::{origMethodName}
	 * @todo Implement testIn().
	 */
	public function testIn()
	{
		$oItems = new SOSO_ORM_Table('user_items');
		$this->object->in('qq',$oItems->setSelect('qq'));
		$a = $this->object->find();
	}

	/**
	 * @covers SOSO_ORM_Table::{origMethodName}
	 * @todo Implement testSetIgnoreCase().
	 */
	public function testSetIgnoreCase()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
	}

	/**
	 * @covers SOSO_ORM_Table::{origMethodName}
	 * @todo Implement testSetSelect().
	 */
	public function testSetSelect()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
	}

	/**
	 * @covers SOSO_ORM_Table::{origMethodName}
	 * @todo Implement testFind().
	 */
	public function testFind()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
	}

	/**
	 * @covers SOSO_ORM_Table::{origMethodName}
	 * @todo Implement testUseTransaction().
	 */
	public function testUseTransaction()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
	}

	/**
	 * @covers SOSO_ORM_Table::apply
	 * 
	 */
	public function testApply()
	{
		
	}
	/**
    +--------+-------+----------+----------+-----------+--------+---------+--------+------------+--------+
	| qq     | golds | maxgolds | buytimes | drawtimes | pclose | lighted | source | daily_date | status |
	+--------+-------+----------+----------+-----------+--------+---------+--------+------------+--------+
	| 223456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      1 |
	| 323456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
	| 423456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
	| 723456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
	| 623456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
	| 523456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
	| 823456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
	| 923456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
	| 103456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      1 |
	| 123456 |   100 |      500 |        0 |         0 |      0 |       0 | NULL   | 0000-00-00 |      0 |
 	*/
	public function forNewUpdate(){
		return array(
			array(103456,100,500),
//			array(223456,100,500),
//			array(323456,100,500),
//			array(223456,100,500),
//			array(923456,100,500),
//			array(array(923456,103456,823456),888,999)
		);
	}
	
	/**
	 * @covers SOSO_ORM_Table::update
	 * @dataProvider forNewUpdate 
	 */
	public function testUpdate($qq,$golds,$maxgolds)
	{
		if (is_array($qq)){
		}
		
		//测试数组参数　（testA)
		$res = $this->object->add('qq',$qq)->update(array('golds'=>$golds*2,'maxgolds'=>$maxgolds*2));
		$data = $this->object->find();
		$this->object->update(array('golds'=>$golds,'maxgolds'=>$maxgolds));//改回去
		//end testA
		
		//测试$obj->mCol方式 testB
		$this->object->_reset();
		$this->object->mQq = $qq;
		$res2 = $this->object->update(array('golds'=>$golds*3));
		$mapsize2 = $this->object->getCriteria()->size();
		$sql2 = $this->object->getLastQuery();
		//$this->debug();
		$data2 = $this->object->find();
		$this->object->update(array('golds'=>$golds));//改回去
		//endTestB

		//测试混合方式testC
		$this->object->_reset();
		$this->object->mQq = $qq;
		$notExistQq = 'abcdefg';
		$this->object->add('qq',$notExistQq);
		$res3 = $this->object->update(array('golds'=>$golds*3));
		//$this->debug('BOTH');
//		$data3 = $this->object->find();
//		$res3 && $this->object->update(array('golds'=>$golds));//改回去
		
		//TestD
		$this->object->_reset();
		$this->object->mQq = $notExistQq;
		$this->object->add('qq',$qq);
		$res4 = $this->object->update();//不传参数，返回false
		$sql4 = $this->object->getLastQuery();//无sql
		
		//TestE
		$this->object->_reset();
		$existNum = 2;
		$this->object->in('qq',array($qq,'123456',$notExistQq));
		$crit = new SOSO_ORM_Criteria();
		$crit->add(Restrictions::eqProperty('golds', 'golds+1'));
		$res5 = $this->object->update($crit);
		$data5 = $this->object->find();
		//$this->debug('Update 101');
		$sql5 = $this->object->getLastQuery();
		//var_dump($this->object->getCriteria()->getMap());
		$actualNum = $this->object->update(array('golds'=>$golds));	
		//$this->debug('UpdateBack');
		
		//testA
		$this->assertEquals(1, $res);
		$this->assertEquals($golds*2, $data[0]['golds']);
		$this->assertEquals($maxgolds*2, $data[0]['maxgolds']);
		//testA end
		
		//TestB
		//属性的方式对update无效
		$this->assertEquals(10, $res2);//数据表中一共有１０条记录
		$this->assertEquals($golds*3, $data2[0]['golds']);
		$this->assertEquals($maxgolds,$data2[0]['maxgolds']);
		$this->assertEquals(0, $mapsize2);
		$this->assertNotContains('where', $sql2);
		//testC
		//同时有属性和add的条件时，以add为主
		$this->assertEquals(0,$res3);
		
		//testD
		$this->assertFalse($res4);
		$this->assertEmpty($sql4);
		
		//testE
		$this->assertEquals($existNum, $res5);
		$this->assertEquals($existNum, $actualNum);
		
	}

	public function forSelectData(){
		return array(
			array(223456,100,true),
			array(723456,100,true),
			array(7788,0,false),
		);
	}
	
	/**
	 * @covers SOSO_ORM_Table::select
	 * @covers SOSO_ORM_Table::getLastQuery
	 * @covers SOSO_ORM_Table::clear
	 * @covers SOSO_ORM_Table::in
	 * @covers SOSO_ORM_Table::orderBy
	 * @covers SOSO_ORM_Criteria::setPage
	 * @covers SOSO_ORM_Criteria::add
	 * 
	 * @dataProvider forSelectData
	 */
	public function testSelect($qq,$golds,$exists)
	{
		$res = $this->object->select();
		$this->assertFalse($res);
		$this->assertEmpty($this->object->getLastQuery());
		
		$result = $this->object->add('qq',$qq)->select();
		$this->assertEquals($exists, $result);
		$otherQQ = 123456;
		
		if ($exists){
			$this->assertEquals($golds, $this->object->mGolds);
			$this->assertEquals('hao', $this->object->mSource);
			
			
			$this->object->clear()->in('qq',array($qq,$otherQQ));
			//在有多条记录时，使用select要小心，它只选一条，并回填属性
			$result = $this->object->select();
			$this->assertTrue($result);
			$this->assertEquals(min(array($qq,$otherQQ)), $this->object->mQq);
			
			$this->object->clear()->in('qq',array($qq,$otherQQ))->orderBy('qq', Restrictions::DESC);
			$result = $this->object->select();
			$this->assertTrue($result);
			$this->assertEquals(max(array($qq,$otherQQ)), $this->object->mQq);
		}
		
		//未进行clear
		$crit = new SOSO_ORM_Criteria();
		$crit->add('qq',$otherQQ);
		//传递Criteria后，自身的条件失效,包括分页信息
		$result = $this->object->setPage(100,5)->select($crit);
		$this->assertTrue($result);
		
		//如果传递参数后，要分页，则需要在参数的criteria对象上设置分页
		$result = $this->object->select($crit->setPage(100,5));
		//$this->debug();
		$this->assertFalse($result);
	}

	/**
	 * @covers SOSO_ORM_Table::count
+--------+-------+----------+----------+-----------+--------+---------+--------+------------+--------+
| qq     | golds | maxgolds | buytimes | drawtimes | pclose | lighted | source | daily_date | status |
+--------+-------+----------+----------+-----------+--------+---------+--------+------------+--------+
| 223456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      1 |
| 323456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
| 423456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
| 723456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
| 623456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
| 523456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
| 823456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
| 923456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
| 103456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      1 |
| 123456 |   100 |      500 |        0 |         0 |      0 |       0 | NULL   | 0000-00-00 |      0 |
+--------+-------+----------+----------+-----------+--------+---------+--------+------------+--------+
	 */
	public function testCount()
	{
		$sql = "select count(*) from users";
		$cnt = $this->object->getCommand()->ExecuteScalar($sql);
		
		$this->assertEquals($cnt, $this->object->count());
		$this->assertEquals($cnt, count($this->object));
		
		$limit = 5;		
		$qqExists = '123456';
		$this->object->add('qq',$qqExists);
		$this->assertEquals(1, $this->object->count());
		$this->assertEquals(1, count($this->object));
		
		$qqList = array('123456','223456','323456');
		$this->object->clear();
		$this->object->in('qq',$qqList);
		$this->assertEquals(count($qqList), $this->object->count());
		$this->assertEquals(count($qqList), count($this->object));
		
	}

	public function forSave(){
		return array(
			array(11,12,13,14),
			array(21,22,23,24),
			array(31,32,33,34),
			array(41,42,43,44),
			array(51,52,53,54),
		);
	}
	/**
	 * @covers SOSO_ORM_Table::save
	 * @covers SOSO_ORM_Table::add
	 * @covers SOSO_ORM_Table::delete
	 * @covers SOSO_ORM_Table::_reset
	 * @covers SOSO_ORM_Table::count
	 * @dataProvider forSave
	 */
	public function testSave($qq,$golds,$maxgolds,$buytimes)
	{
		$count = $this->object->count();
		
		$res = $this->object->add('qq',$qq)
				->add('golds',$golds)
				->add('maxgolds',$maxgolds)
				->add('buytimes',$buytimes)
				->save();
		//$this->debug("Count($count)");
		$count1 = $this->object->clear()->count();
		$this->object->add('qq',$qq)->delete();
		
		$res2 = $this->object->save(array('qq'=>$qq,'golds'=>$golds,'maxgolds'=>$maxgolds,'buytimes'=>$buytimes));
		$res2_1 = $this->object->save(array('qq'=>$qq,'golds'=>$golds,'maxgolds'=>$maxgolds,'buytimes'=>$buytimes));
		//var_dump(array('res2'=>$res2));
		//$this->debug("res2");
		
		$count2 = $this->object->clear()->count();
		$this->object->add('qq',$qq)->delete();

		$crit = new SOSO_ORM_Criteria();
		$crit->add('qq',$qq)
				->add('golds',$golds)
				->add('maxgolds',$maxgolds)
				->add('buytimes',$buytimes);
		$res3 = $this->object->_reset()->save($crit);
		$count3 = $this->object->clear()->count();
		$res3_1 = $this->object->_reset()->save($crit);
		$this->object->add('qq',$qq)->delete();
		
		$this->assertTrue($res);
		$this->assertEquals(array(true),$res2);
		$this->assertEquals(array(),$res2_1);
		$this->assertTrue($res3);
		$this->assertFalse($res3_1);
		$this->assertEquals($count1, $count2);
		$this->assertEquals($count1, $count3);
		$this->assertEquals($count + 1, $count2);
	}

	public function forDelete(){
		return array(
			array(9999,8888,77777),
			array(7777,8888,9999),
		);
	}
	/**
	 * @covers SOSO_ORM_Table::delete
	 * @covers SOSO_ORM_Table::on
	 * @covers SOSO_ORM_Table::clear
	 * @covers SOSO_ORM_Table::count
	 * @dataProvider forDelete
+--------+-------+----------+----------+-----------+--------+---------+--------+------------+--------+
| qq     | golds | maxgolds | buytimes | drawtimes | pclose | lighted | source | daily_date | status |
+--------+-------+----------+----------+-----------+--------+---------+--------+------------+--------+
| 223456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
| 323456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
| 423456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
| 523456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
| 623456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
| 723456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
| 823456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
| 923456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
| 103456 |   100 |      500 |        0 |         0 |      0 |       0 | hao    | 2012-02-28 |      0 |
| 123456 |   100 |      500 |        0 |         0 |      0 |       0 | NULL   | 0000-00-00 |      0 |
+--------+-------+----------+----------+-----------+--------+---------+--------+------------+--------+
	 */
	public function testDelete($qq,$golds,$maxgolds)
	{
		$message = '';
		$noticeMessage = 'Please use deleteAll instead';
		$this->object->on('deleteexception',function($a) use (&$message){
			$message = $a;
		});
		$this->object->delete();
		$this->object->add('qq',$qq)
			->add('golds',$golds)
			->add('maxgolds',$maxgolds)
			->save();
		$count = $this->object->clear()->count();
//		echo "count:".$count."\n";
		$res = $this->object->add('qq',$qq)->delete();
		$countAfterDel = $this->object->clear()->count();
//		echo "countDel:".$countAfterDel."\n";
		
		$this->object->add('qq',$qq)
			->add('golds',$golds)
			->add('maxgolds',$maxgolds)
			->save();
		
		$this->object->_reset()->add('source',null)->delete();
//		$this->debug('sourceDel');
		
		$countAfterDel2 = $this->object->clear()->count();
		//$this->debug('countAfterDel2');
//		echo $countAfterDel2;
		
		$this->assertEquals($noticeMessage,$message);
		$this->assertEquals($count, $countAfterDel+1);
		//因为qq＝123456的source也为null,所以会少一个
		$this->assertEquals($countAfterDel, 1 + $countAfterDel2);
		$this->assertTrue(!!$res);
	}
	
	public function testDelete2(){
		$data = $this->object->_reset()->find();
		$qqList = array('223456','723456','103456','523456');
		$this->object->in('qq',$qqList);
		$inData = $this->object->find();
		$res = $this->object->delete();
		$this->object->save($inData);
		$this->assertEquals(4,$res);
	}
	
	/**
	 * @covers SOSO_ORM_Table::delete
	 * @covers SOSO_ORM_Table::in
	 * @covers SOSO_ORM_Table::setSelect
	 * @covers SOSO_ORM_Table::save
	 */
	public function testDelete3(){
		$data = $this->object->join("user_items",'qq',SOSO_ORM_Criteria::INNER_JOIN)
					->find();
//		$this->debug();
//		print_r($data);
		
		$this->object->clear();
		$oItems = new SOSO_ORM_Table('user_items');
		$this->object->in('qq',$oItems->setSelect('qq'));
		
		$res = $this->object->delete();
//		$this->debug("Delete");
//		var_dump($res);

		$res2 = $this->object->save($data);
//		$this->debug("save");
//		var_dump($res2);
		$this->assertCount($res,$data);
		$this->assertGreaterThan(0,$res);
		$this->assertCount($res,$res2);
		
	}
	

	/**
	 * @covers SOSO_ORM_Table::deleteAll
	 * @covers SOSO_ORM_Table::save
	 * @covers SOSO_ORM_Table::count
	 * 
	 */
	public function testDeleteAll()
	{
		$data = $this->object->find();
		$countBeforeTrunc = $this->object->count();
		$this->object->deleteAll();
		$countAfterTrunc = $this->object->count();
		$this->object->save($data);
		$countTheEnd = $this->object->count();
		
		$this->assertEquals(count($data),$countBeforeTrunc);
		$this->assertEquals(0,$countAfterTrunc);
		$this->assertEquals($countBeforeTrunc,$countTheEnd);
	}

	/**
	 * @covers SOSO_ORM_Table::truncate
	 * @covers SOSO_ORM_Table::save
	 * @covers SOSO_ORM_Table::count
	 * 
	 */
	public function testTruncate()
	{
		$data = $this->object->find();
		$countBeforeTrunc = $this->object->count();
		$this->object->truncate();
		$countAfterTrunc = $this->object->count();
		$this->object->save($data);
		$countTheEnd = $this->object->count();
		
		$this->assertEquals(count($data),$countBeforeTrunc);
		$this->assertEquals(0,$countAfterTrunc);
		$this->assertEquals($countBeforeTrunc,$countTheEnd);
	}

	/**
	 * @covers SOSO_ORM_Table::getParam
	 * 
	 */
	public function testGetParams()
	{
		$param = $this->object->getParams();
		$this->assertCount(0, $param);
		$qq = 11223344;
		$golds = 334455;
		$this->object->add('qq',$qq)
			->add('golds',$golds);
			
		$param = $this->object->getParams();
		$this->object->find();
		$param2 = $this->object->getParams();
		
		$this->assertCount(0, $param);
		$this->assertEquals(new ArrayIterator(array($qq,$golds)), $param2);
		
	}

	/**
	 * @covers SOSO_ORM_Table::clear
	 * @covers SOSO_ORM_Table::setSelect
	 * @covers SOSO_ORM_Table::columnAlias
	 * @covers SOSO_ORM_Table::alias
	 */
	public function testClear()
	{
		$this->assertEquals(0, $this->object->getCriteria()->size());
		$this->object->add('qq','123456');
		$this->assertEquals(1, $this->object->getCriteria()->size());
		$this->object->clear();
		$this->assertEquals(0, $this->object->getCriteria()->size());
		$this->assertEquals($this->object->getTable(),$this->object->getCriteria()->getPrimaryTableName());

		$this->object->alias('test');
		$columns = array('qq','golds');
		$this->object->columnAlias('qq', 'testqq');
		$this->object->setSelect($columns);
		$this->assertTrue($this->object->getCriteria()->isIgnoreCase());
		$this->assertCount(1, $this->object->getCriteria()->getAsColumns());
		$this->assertCount(1, $this->object->getCriteria()->getAsTables());
		$this->assertEquals($columns, $this->object->getCriteria()->getSelectColumns());
		$page = 5;
		$pagesize = 20;
		$defaultPage = 1;//当不设置时，默认为1
		$this->object->setPage($page,$pagesize);
		
		$this->object->clear();
		
		$this->assertCount(0, $this->object->getCriteria()->getAsColumns());
		$this->assertCount(0, $this->object->getCriteria()->getAsTables());
		$this->assertCount(0, $this->object->getCriteria()->getSelectColumns());
		$this->assertTrue($this->object->getCriteria()->isIgnoreCase());
		$this->assertEquals(1, $this->object->getCriteria()->getPage());
		$this->assertEquals(0, $this->object->getCriteria()->getOffset());
		$this->assertEquals(0, $this->object->getCriteria()->getLimit());		
	}

	/**
	 * @covers SOSO_ORM_Table::{origMethodName}
	 * @todo Implement test_cached_list().
	 */
	public function test_cached_list()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
	}

	/**
	 * @covers SOSO_ORM_Table::_iterate
	 * @covers SOSO_ORM_Table::getLastQuery
	 * @covers SOSO_ORM_Table::_list
	 * 
	 */
	public function test_iterate()
	{
		$stmt = $this->object->_reset()->_iterate();
		$sql1 = $this->object->getLastQuery();
		$allData = $this->object->_list();
		$sql2 = $this->object->getLastQuery();
		$index = 0;
		$datas = array();
		foreach ($stmt as $data){
			$datas[] = $data;
		}
		$this->assertInstanceOf('PDOStatement', $stmt);
		$this->assertEquals($this->object->getLastQuery(), $stmt->queryString);
		$this->assertEquals($allData, $datas);
		$this->assertEquals($sql1, $sql2);
	}

	/**
	 * @covers SOSO_ORM_Table::_refresh
	 * @covers SOSO_ORM_Table::count
	 * @covers SOSO_ORM_Table::delete
	 * @covers SOSO_ORM_Table::find
	 * 
	 */
	public function test_refresh()
	{
		$qqNotExists = '88776655';
		$golds = 1024;
		
		$this->object->_reset();
		$obj = clone($this->object);
		$count = count($this->object);
		
		$res = $this->object->add('qq',$qqNotExists)->_refresh();
		//var_dump($this->object->getCriteria()->getMap());
		//$this->debug("_refresh");

		//$res = $this->object->add('qq',$qqNotExists)->_refresh();
		
		$count2 = count($obj);
		$data = $this->object->find();
//		echo "\n";
//		$this->debug("find");
		
		
		$this->object->mGolds = $golds;
		//$this->object->apply();
		$res = $this->object->_refresh();
//		echo "\n";
//		$this->debug("Second_Refresh");
		//var_dump($this->object->getCriteria()->getMap());
		//$this->debug("delete");
		//return;
		//->_refresh();
		
		$data2 = $this->object->find();
		//$this->debug();
		//$this->object->clear()->add('qq',$qqNotExists)->delete();		
		$this->object->delete();
//		echo "\n";
//		$this->debug();
		$this->assertEquals($count, $count2-1);
		$this->assertEquals(0, $data[0]['golds']);
		$this->assertEquals($golds, $data2[0]['golds']);
	}

	/**
	 * @covers SOSO_ORM_Table::_delete
	 * @covers SOSO_ORM_Table::save
	 * @covers SOSO_ORM_Table::add
	 * @covers SOSO_ORM_Table::reset
	 * @covers SOSO_ORM_Table::clear
	 */
	public function test_delete()
	{
		$num = count($this->object);
		$data = $this->object->setPage(3,1)->find();

		$data = $data[0];
		$data['qq'] = strrev($data['qq']);
		$this->object->save($data);
		$count = count($this->object);
		$res2 = $this->object->add('qq',$data['qq'])
					->_delete();
		
		$this->object->save($data);
		
		$count2 = count($this->object->clear());
		$this->object->mQq = $data['qq'];
		$res3 = $this->object->_delete();
		$count3 = count($this->object->reset());
		
		$this->assertEquals(1, $res2);
		$this->assertEquals($count2, $count);
		$this->assertEquals($count3 + 1, $count2);	
	}

	/**
	 * @covers SOSO_ORM_Table::_getPagination
	 * @covers SOSO_ORM_Table::setPage
	 * @covers SOSO_ORM_Table::find
	 */
	public function test_getPagination()
	{
		$this->object->_reset();
		$page = $this->object->_getPagination();
		$this->assertNull($page);
		//$this->obje
		$this->object->find();
		$this->assertNull($page);
		
		//$total = 10;
		$pagesize = 2;
		$this->object->setPage(1,$pagesize);
		$this->object->find();
		$crit = $this->object->getCriteria();
		//var_dump(array($crit->getLimit() , $crit->getPage()));
		$this->assertInstanceOf('SOSO_Util_Pagination', $this->object->_getPagination());
		//因为是复制的，所以不相同
		$this->assertNotSame($page, $this->object->_getPagination());
	}

	/**
	 * @covers SOSO_ORM_Table::_getObjects
	 * 获得一个Table对象数组
	 */
	public function test_getObjects()
	{
		$num = 10;
		$result = $this->object->_getObjects();
		$this->assertInternalType('array', $result);
		$this->assertCount($num, $result);
		$this->assertInstanceOf('SOSO_ORM_Table', $result[0]);
		$this->assertEquals(0, $result[0]->getCriteria()->size());
		$this->assertNotNull($result[0]->mQq);
	}

	/**
	 * @covers SOSO_ORM_Table::_count
	 * 
	 */
	public function test_count()
	{
		$num = 10;
		$this->assertEquals($num, $this->object->_count());
		$this->assertEquals(1,$this->object->_count(1,'*','golds'));
		
		$qq = 123456;
		$this->object->add('qq',$qq);
		$this->assertEquals(1,$this->object->_count());
	}


	/**
	 * @covers SOSO_ORM_Table::reset
	 * @covers SOSO_ORM_Table::setState
	 * @covers SOSO_ORM_Table::getState
	 * reset会重置maphash,madditionalcondition及state等属性为''或null
	 */
	public function testReset()
	{
		$golds = 500;
		$this->object->mGolds = $golds;
		$this->object->mAdditionalCondition = 'hello=kitty';
		$this->object->setState('testing');
		$this->object->reset();
		$this->assertNull($this->object->mGolds);
		$this->assertEmpty($this->object->mAdditionalCondition);
		$this->assertNull($this->object->getState());
	}
	
	/**
	 * @covers SOSO_ORM_Table::_reset
	 * @covers SOSO_ORM_Table::find
	 * @covers SOSO_ORM_Table::getLastQuery
	 * @covers SOSO_ORM_Criteria::size
	 * 
	 * _reset会比reset会多执行一个clear（重置所有criteria设置的条件),以及上次执行的所有sql记录（会影响getLastQuery)
	 * @depends testReset
	 */
	public function test_reset()
	{
		$qq = 12345;
		$thos->object->mGolds = 1024;
		$this->object->add('qq',$qq);
		$this->object->find();
		
		$this->assertEquals(1,$this->object->getCriteria()->size());
		$this->assertGreaterThan(10, strlen($this->object->getLastQuery()));
		
		$this->object->_reset();
		$this->assertEquals(0,$this->object->getCriteria()->size());
		$this->assertEquals(0, strlen($this->object->getLastQuery()));
		$this->assertNull($this->object->mGolds);
		
	}

	/**
	 * @covers SOSO_ORM_Table::count
	 * @covers SOSO_ORM_Table::toDOM
	 */
	public function testToDOM()
	{
		$dom = $this->object->_reset()->toDOM();
		$this->assertInstanceOf('DOMDocument', $dom);
		$this->assertEquals(count($this->object), $dom->documentElement->childNodes->length);
	}

	/**
	 * @covers SOSO_ORM_Table::getIterator
	 * @covers SOSO_ORM_Table::getMapHash
	 */
	public function testGetIterator()
	{
		$golds = 500;
		$arr = array();
		$this->object->mGolds = $golds;
		foreach ($this->object as $k=>$v){
			$arr[$k] = $v;
		} 
		$this->assertEquals($this->object->getMapHash(), $arr);
		$this->assertEquals((array)$this->object->getIterator(), $arr);
		$this->assertEquals($arr['golds'], $golds);
	}

	/**
	 * @covers SOSO_ORM_Table::getMapHash
	 * 
	 */
	public function testGetMapHash()
	{
		$this->object->_reset();
		$map = $this->object->getMapHash();
		$this->assertEmpty(array_filter($map));
		$golds1 = 500;
		$this->object->mGolds = $golds1;
		$this->assertNull($map['golds']);
		
		$golds2 = 200;
		$map['golds'] = $golds2;
		//属性不变
		$this->assertEquals($golds1, $this->object->mGolds);
		
		$map = $this->object->getMapHash(true);
		$this->object->mGolds = $golds1;
		$this->assertEquals($golds1, $map['golds']);
		
		$map['golds'] = $golds2;
		$this->assertEquals($golds2, $this->object->mGolds);
	}

	/**
	 * @covers SOSO_ORM_Table::{origMethodName}
	 * @todo Implement testNotifyObservers().
	 */
	public function testNotifyObservers()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
	}

	/**
	 * @covers SOSO_ORM_Table::{origMethodName}
	 * @todo Implement testAttach().
	 */
	public function testAttach()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
	}

	/**
	 * @covers SOSO_ORM_Table::{origMethodName}
	 * @todo Implement testDetach().
	 */
	public function testDetach()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
	}

	/**
	 * @covers SOSO_ORM_Table::{origMethodName}
	 * @todo Implement testNotify().
	 */
	public function testNotify()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
	}

	/**
	 * @covers SOSO_ORM_Table::{origMethodName}
	 * @todo Implement testAddObserver().
	 */
	public function testAddObserver()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
	}

	/**
	 * @covers SOSO_ORM_Table::setState
	 * @covers SOSO_ORM_Table::getState
	 * 
	 */
	public function testGetState()
	{
		$this->object->_reset();
		$this->assertNull($this->object->getState());
		$state = 'hello';
		$this->object->setState($state);
		$this->assertEquals($state, $this->object->getState());
	}

	/**
	 * @covers SOSO_ORM_Table::{origMethodName}
	 * @todo Implement testBeginTransaction().
	 */
	public function testBeginTransaction()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
	}

	/**
	 * @covers SOSO_ORM_Table::{origMethodName}
	 * @todo Implement testCommit().
	 */
	public function testCommit()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
	}

	/**
	 * @covers SOSO_ORM_Table::{origMethodName}
	 * @todo Implement testGetCurrentTransaction().
	 */
	public function testGetCurrentTransaction()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
	}

	/**
	 * @covers SOSO_ORM_Table::{origMethodName}
	 * @todo Implement testRollback().
	 */
	public function testRollback()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
          'This test has not been implemented yet.'
          );
	}

	/**
	 * @covers SOSO_ORM_Table::setCharset
	 * @covers SOSO_ORM_Table::getCharset
	 * @covers SOSO_DB_PDOSQLCommand::getCharset
	 */
	public function testSetCharset()
	{
		$charset = 'gbk';
		$charsetNow = $this->object->getCharset();
		$this->assertEquals('utf8', $charsetNow);
		$this->object->setCharset($charset);
		$this->assertEquals($this->object->getCommand()->getCharset(), $charset);
		$this->assertEquals($this->object->getCharset(), $charset);
	}

	/**
	 * @covers SOSO_ORM_Table::setState
	 * @covers SOSO_ORM_Table::getState
	 * 
	 */
	public function testSetState()
	{
		$this->object->_reset();
		$this->assertNull($this->object->getState());
		$state = 'hello';
		$this->object->setState($state);
		$this->assertEquals($state, $this->object->getState());
	}

	/**
	 * @covers SOSO_ORM_Table::_get
	 * @covers SOSO_ORM_Table::getCriteria
	 * @covers SOSO_ORM_Criteria::getMap
	 * 可以获得任何内部属性。。将来要去掉获得非hashMap功能
	 */
	public function test_get()
	{
		$crit = $this->object->_get('criteria');
		$this->assertInstanceOf('SOSO_ORM_Criteria', $crit);
		$this->assertSame($this->object->getCriteria(), $crit);
		$this->assertEquals($this->object->_get('golds'),$this->object->mGolds);
		
		$this->object->mGolds = 500;
		$this->assertEquals(500,$this->object->_get('golds'));
		
		$this->object->add('qq',123456);
		$this->assertSame($this->object->getCriteria()->getMap(), $crit->getMap());
	}

	/**
	 * @covers SOSO_ORM_Table::getCharset
	 * 
	 */
	public function testGetCharset()
	{
		$charset = 'utf8';
		$this->assertEquals($charset,$this->object->getCharset());
	}

	/**
	 * @covers SOSO_ORM_Table::getPrimaryKey
	 * 
	 */
	public function testGetPrimaryKey()
	{
		$primaryKey = 'qq';
		$this->assertContains($primaryKey, $this->object->getPrimaryKey());
	}

	/**
	 * @covers SOSO_ORM_Table::getCountQuery
	 * 
	 */
	public function testGetCountQuery()
	{
		$this->object->_reset();
		$sql = $this->object->getCountQuery();
		$this->assertEquals('', $sql);
		
		$this->object->find();
		$this->assertRegExp("#select\s*count\([\s`]*\*\).*from#i", $this->object->getCountQuery());
	}

	/**
	 * @covers SOSO_ORM_Table::getLastQuery
	 * @covers SOSO_ORM_Table::find
	 * @covers SOSO_ORM_Table::update
	 * @covers SOSO_ORM_Table::delete
	 * @covers SOSO_ORM_Table::_reset
	 * @covers SOSO_ORM_Table::add
	 * 
	 */
	public function testGetLastQuery()
	{
		$this->object->_reset();
		$sql = $this->object->getLastQuery();
		$this->assertEquals('', $sql);
		$this->object->find();
		$this->assertRegExp("#select.*from.*#i", $this->object->getLastQuery());
		
		$notExist = '24680';
		$this->object->add('qq',$notExist);
		$this->object->update(array('golds'=>1));
		$this->assertRegExp("#^\s*update\s*".$this->object->getTable()."\s*.*set#i", $this->object->getLastQuery());
		
		$this->object->delete();
		$this->assertRegExp("#^\s*delete\s*from.*".$this->object->getTable().".*where#i", $this->object->getLastQuery());
		
	}

	/**
	 * @covers SOSO_ORM_Table::getTable
	 *
	 */
	public function testGetTable()
	{
		$table = 'users';
		$this->assertEquals($table, $this->object->getTable());
		$tableName = 'uSer_IteMs';
		$object = new SOSO_ORM_Table($tableName);
		$this->assertEquals($tableName, $object->getTable());
	}

	/**
	 * @covers SOSO_ORM_Table::setIndex
	 * @covers SOSO_DB_PDOSQLCommand::setIndex
	 * @covers SOSO_ORM_Criteria::getDbIndex
	 *
	 */
	public function testSetIndex()
	{
		$this->assertEquals(0,$this->object->getDbIndex());
		$index = 1;
		$database = SOSO_Frameworks_Registry::getInstance()->get('databases');
		SOSO_Frameworks_Registry::getInstance()->set('databases',array_merge($database,$database));
		//print_r(SOSO_Frameworks_Registry::getInstance()->get('databases'));
		try{
			$this->object->setIndex($index);
		}catch(Exception $e){
			$index = 0;
		}

		$this->assertEquals(1,$this->object->getDbIndex());
		$this->assertEquals($index,$this->object->getCommand()->getIndex());
		$this->assertEquals($index,$this->object->getCriteria()->getDbIndex());
	}

	/**
	 * @covers SOSO_ORM_Table::getDbIndex
	 * @depends testSetIndex
	 */
	public function testGetDbIndex()
	{
		$this->assertEquals(0,$this->object->getDbIndex());
	}


	/**
	 * @covers SOSO_ORM_Table::getCommand
	 * @covers SOSO_DB_PDOSQLCommand::getActive
	 * @covers SOSO_DB_PDOSQLCommand::getIndex
	 */
	public function testGetCommand()
	{
		$cmd = $this->object->getCommand();
		$this->assertInstanceOf('SOSO_DB_PDOSQLCommand', $cmd);
		$this->assertTrue($cmd->getActive());
		//每次都是复制的一个新对象
		$this->assertNotSame($cmd, $this->object->getCommand());
		$this->assertEquals($this->object->getDbIndex(),$cmd->getIndex());
	}

	/**
	 * @covers SOSO_ORM_Table::getError
	 * @covers SOSO_DB_Table::find
	 */
	public function testGetError()
	{
		//$invalidSQL = "SELECT * FROM users WHERE `invalidcolumn` = '123'";
		$this->object->add('invalidColumn',123);
		$this->object->find();

		//$this->object->getLastQuery();
		$error = $this->object->getError();
		//print_r($error);
		$errorCode = 1054;
		$this->assertEquals(3, count($error));
		$this->assertEquals($errorCode,$error[1]);
	}

	/**
	 * @covers SOSO_ORM_Table::__clone
	 * @covers SOSO_ORM_Criteria::getMap
	 * @covers SOSO_ORM_Table::add
	 */
	public function test__clone()
	{
		$this->object->add('qq',123456);
		$this->object->mGolds = 500;
		$clone = clone($this->object);
		$this->assertEquals(500, $clone->mGolds);
		$this->assertEquals($this->object->mGolds, $clone->mGolds);
		$this->assertEquals($this->object->getCriteria()->getMap(), $clone->getCriteria()->getMap());
		 
		//测试互不影响
		$clone->mGolds = 123;
		$clone->add('qq',654321);
		$this->assertEquals(500, $this->object->mGolds);
		$this->assertNotEquals($this->object->mGolds, $clone->mGolds);
		$this->assertNotEquals($this->object->getCriteria()->getMap(), $clone->getCriteria()->getMap());
		 
	}
}

class Users extends SOSO_ORM_Table/*Object*/ {
	/**
	 *
	 * Class Member Mapping to Table "users" Field "qq"
	 * 类的属性成员，指向 users 表的 qq 字段
	 * Refer to $this->mMapHash['qq'];
	 * 指向 $this->mMapHash['qq'] 的同一变量;
	 * @access public
	 * @var bigint(4) unsigned
	 */
	public $mQq;

	/**
	 * 当前金币数
	 * Class Member Mapping to Table "users" Field "golds"
	 * 类的属性成员，指向 users 表的 golds 字段
	 * Refer to $this->mMapHash['golds'];
	 * 指向 $this->mMapHash['golds'] 的同一变量;
	 * @access public
	 * @var int(4) unsigned
	 */
	public $mGolds;

	/**
	 *
	 * Class Member Mapping to Table "users" Field "maxgolds"
	 * 类的属性成员，指向 users 表的 maxgolds 字段
	 * Refer to $this->mMapHash['maxgolds'];
	 * 指向 $this->mMapHash['maxgolds'] 的同一变量;
	 * @access public
	 * @var int(4) unsigned
	 */
	public $mMaxgolds;

	/**
	 * 兑换次数
	 * Class Member Mapping to Table "users" Field "buytimes"
	 * 类的属性成员，指向 users 表的 buytimes 字段
	 * Refer to $this->mMapHash['buytimes'];
	 * 指向 $this->mMapHash['buytimes'] 的同一变量;
	 * @access public
	 * @var int(4) unsigned
	 */
	public $mBuytimes;

	/**
	 * 抽奖次数
	 * Class Member Mapping to Table "users" Field "drawtimes"
	 * 类的属性成员，指向 users 表的 drawtimes 字段
	 * Refer to $this->mMapHash['drawtimes'];
	 * 指向 $this->mMapHash['drawtimes'] 的同一变量;
	 * @access public
	 * @var int(4) unsigned
	 */
	public $mDrawtimes;

	/**
	 * 永久关闭彩蛋:０否,１是;
	 * Class Member Mapping to Table "users" Field "pclose"
	 * 类的属性成员，指向 users 表的 pclose 字段
	 * Refer to $this->mMapHash['pclose'];
	 * 指向 $this->mMapHash['pclose'] 的同一变量;
	 * @access public
	 * @var tinyint(1)
	 */
	public $mPclose;

	/**
	 * 点亮图票:０未,１已点亮
	 * Class Member Mapping to Table "users" Field "lighted"
	 * 类的属性成员，指向 users 表的 lighted 字段
	 * Refer to $this->mMapHash['lighted'];
	 * 指向 $this->mMapHash['lighted'] 的同一变量;
	 * @access public
	 * @var tinyint(1)
	 */
	public $mLighted;

	/**
	 * 上次来路 toolbar,web,im,nav etc
	 * Class Member Mapping to Table "users" Field "source"
	 * 类的属性成员，指向 users 表的 source 字段
	 * Refer to $this->mMapHash['source'];
	 * 指向 $this->mMapHash['source'] 的同一变量;
	 * @access public
	 * @var char(10)
	 */
	public $mSource;

	/**
	 * 完成日常任务的日期,任务按此字段进行bit重置;
	 * Class Member Mapping to Table "users" Field "daily_date"
	 * 类的属性成员，指向 users 表的 daily_date 字段
	 * Refer to $this->mMapHash['daily_date'];
	 * 指向 $this->mMapHash['daily_date'] 的同一变量;
	 * @access public
	 * @var date
	 */
	public $mDailyDate;


	/**
	 * ０默认值,供扩展使用
	 * Class Member Mapping to Table "users" Field "status"
	 * 类的属性成员，指向 users 表的 status 字段
	 * Refer to $this->mMapHash['status'];
	 * 指向 $this->mMapHash['status'] 的同一变量;
	 * @access public
	 * @var tinyint(1)
	 */
	public $mStatus;

	/**
	 * 构造函数
	 * @access public
	 */
	public function __construct($pTable="users",$pIndex="0") {
		parent::__construct($pTable,$pIndex);
	}

	public function prepareHashMap(){
		$tFields = array (
		  'Fields' => 
		array (
		    'qq' => 
		array (
		      'Type' => 'bigint(4) unsigned',
		      'Collation' => NULL,
		      'Null' => 'NO',
		      'Key' => 'PRI',
		      'Default' => NULL,
		      'Extra' => '',
		      'Comment' => '',
		),
		    'golds' => 
		array (
		      'Type' => 'int(4) unsigned',
		      'Collation' => NULL,
		      'Null' => 'NO',
		      'Key' => '',
		      'Default' => '0',
		      'Extra' => '',
		      'Comment' => '当前金币数',
		),
		    'maxgolds' => 
		array (
		      'Type' => 'int(4) unsigned',
		      'Collation' => NULL,
		      'Null' => 'NO',
		      'Key' => '',
		      'Default' => '0',
		      'Extra' => '',
		      'Comment' => '',
		),
		    'buytimes' => 
		array (
		      'Type' => 'int(4) unsigned',
		      'Collation' => NULL,
		      'Null' => 'NO',
		      'Key' => '',
		      'Default' => '0',
		      'Extra' => '',
		      'Comment' => '兑换次数',
		    ),
		    'drawtimes' => 
		    array (
		      'Type' => 'int(4) unsigned',
		      'Collation' => NULL,
		      'Null' => 'NO',
		      'Key' => '',
		      'Default' => '0',
		      'Extra' => '',
		      'Comment' => '抽奖次数',
		    ),
		    'pclose' => 
		    array (
		      'Type' => 'tinyint(1)',
		      'Collation' => NULL,
		      'Null' => 'NO',
		      'Key' => '',
		      'Default' => '0',
		      'Extra' => '',
		      'Comment' => '永久关闭彩蛋:０否,１是;',
		    ),
		    'lighted' => 
		    array (
		      'Type' => 'tinyint(1)',
		      'Collation' => NULL,
		      'Null' => 'NO',
		      'Key' => '',
		      'Default' => '0',
		      'Extra' => '',
		      'Comment' => '点亮图票:０未,１已点亮',
		    ),
		    'source' => 
		    array (
		      'Type' => 'char(10)',
		      'Collation' => 'utf8_general_ci',
		      'Null' => 'YES',
		      'Key' => '',
		      'Default' => NULL,
		      'Extra' => '',
		      'Comment' => '上次来路 toolbar,web,im,nav etc',
		    ),
		    'daily_date' => 
		    array (
		      'Type' => 'date',
		      'Collation' => NULL,
		      'Null' => 'NO',
		      'Key' => '',
		      'Default' => NULL,
		      'Extra' => '',
		      'Comment' => '完成日常任务的日期,任务按此字段进行bit重置;',
		    ),
		    'status' => 
		    array (
		      'Type' => 'tinyint(1)',
		      'Collation' => NULL,
		      'Null' => 'NO',
		      'Key' => '',
		      'Default' => '0',
		      'Extra' => '',
		      'Comment' => '０默认值,供扩展使用',
		    ),
		  ),
		  'Primary' => 
		  array (
		    0 => 'qq',
		  ),
		  'auto' => '',
		  'charset' => 'utf8',
		);
		
		$this->tableFieldHash = array();
		$this->primaryKey = $tFields['Primary'];
		$this->autoKey = $tFields['auto'];
		$this->charset = $tFields['charset'];
		$columns = new ArrayObject(array_keys($tFields['Fields']));
		foreach ($columns as $k=>$v){
			$key = $this->genKey($v);
			$this->{$key} = &$this->hashMap[$v];
			$field = $this->criteria->isIgnoreCase() ? strtolower($v) : $v;
			$this->tableFieldHash[$field] = array('Column'=>$v)+$tFields['Fields'][$v];
		}
		$this->mSQLCommand->setCharset($this->charset);
	}
}
